<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.2.xsd
	">


	<!-- serviceProperties -->
	<!-- 这里是代表cas service, 登陆成功之后返回的地址 -->
	<bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
		<property name="service" value="http://localhost:8080/BabySitterWeb/j_spring_cas_security_check" />
		<property name="sendRenew" value="false" />
	</bean>

	<!-- Authentication Manager 用来提供userDetail,cas service,ticket validation, key等信息 -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="casAuthenticationProvider" />
	</security:authentication-manager>
	
	<!-- 本地userDetailService -->
	<bean id="localUserService" class="com.sut.service.security.LocalUserDetailService">
	</bean>
	
	<bean id="casAuthenticationProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
		<property name="authenticationUserDetailsService">
			<bean class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
				<constructor-arg ref="localUserService" />
			</bean>
		</property>
		<property name="serviceProperties" ref="serviceProperties" />
		<property name="ticketValidator">
			<bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
				<constructor-arg index="0" value="https://localhost:8443/cas_server" />
			</bean>
		</property>
		<!-- 这个是每个casAuthenticationProvider的识别，应该是随意的并且唯一的String -->
		<property name="key" value="casAuthProviderKey" />
 	</bean>
 	
 	<security:user-service id="userService">
 		<security:user name="xiaof" password="post-it" authorities="ROLE_ADMIN, ROLE_USER" />
 		<security:user name="test1" password="" authorities="ROLE_USER" />
 	</security:user-service>
 	
 	<!-- CAS Filter 
 		 1. 验证管理器
 		 2. 验证成功处理器
 		 3. 验证失败处理器
 		 4. session验证策略 	
 	-->
 	<bean id="casFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
 		<property name="authenticationManager" ref="authenticationManager" />
 		<property name="authenticationSuccessHandler" ref="authenticationSuccessHandler" />
 		<property name="authenticationFailureHandler" ref="authenticationFailureHandler" />
 		<property name="sessionAuthenticationStrategy" ref="sessionAuthenticationStrategy" />
 	</bean>
 	
 	<!-- session，如果建立了新的session，然后就把旧的session回收，并且把session的属性拷贝到新的session里 -->
 	<bean id="sessionAuthenticationStrategy" 
 		class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy" />	
 	
 	<!-- cas 认证成功控制器 -->
 	<bean id="authenticationSuccessHandler"
 		class="com.sut.service.security.web.authentication.SimpleRequestAuthenticationSuccessHandler">
 		<!-- 认证成功后返回页面 -->	
 		<property name="defaultTargetUrl" value="/login/welcome" />
 		
 		<!-- 是否强制返回认证页面 -->
 		<property name="alwaysUseDefaultTargetUrl" value="true" />
 		
 		<!-- 用户权限解析 -->
 	</bean>
 	
 	<!-- cas 认证失败控制器 -->
	<bean id="authenticationFailureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<property name="defaultFailureUrl" value="/platform/failure.html" />	
	</bean>
	
	 	
 	<!-- 定义CAS的入口 -->
 	<bean id="casEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
 		<property name="loginUrl" value="https://localhost:8443/cas_server/login" />
 		<property name="serviceProperties" ref="serviceProperties" />
 	</bean>
 	
 	<!-- CSRF Configuration -->
 	<!-- <bean id="csrfTokenFilter" class="" /> -->
 	
 	<!-- CAS Logout Configuration
 	This filter handles a Single Logout Request from the CAS Server -->
 	<!-- 接受来自cas服务器的退出请求，实现客户端同步退出功能 -->
 	<bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter" />
 	
	<!-- This filter redirects to the CAS Server to signal Single Logout should be performed -->
	<bean id="requestSingleLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg value="https://localhost:8443/cas_server/logout" />
		<constructor-arg>
			<bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
		</constructor-arg>
		<property name="filterProcessesUrl" value="/j_spring_cas_security_logout" />
	</bean>
	
	
	<!-- General Configuration -->
	<!-- todo需要自动跳转到spring的认证url:j_spring_cas_security_check -->
	<!-- logout filter -->
	<security:http
		auto-config="false"
		use-expressions="true" 
		entry-point-ref="casEntryPoint"
		access-denied-page="/error/accessDenied.jsp"
		>
		<security:intercept-url pattern="/**" access="permitAll" />
		<!-- <security:intercept-url pattern="/login/cas" access="permitAll" /> -->
		<security:custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER" />
		<security:custom-filter ref="singleLogoutFilter" before="CAS_FILTER" />
		<security:custom-filter ref="casFilter" position="CAS_FILTER" />
		<!-- <security:custom-filter ref="csrfTokenFitler" after="CSRF_FILTER" /> -->
		<security:logout delete-cookies="JESSIONID" />
	</security:http>
	
	<!-- 不拦截的url -->
	<!-- 
	<security:http pattern="/ui/images/**" security="none" />
	<security:http pattern="/ui/js/**" security="none" />
	<security:http pattern="/ui/css/**" security="none" />
	<security:http pattern="/ui/fonts/**" security="none" />
	<security:http pattern="/*.ws*" security="none" />
	<security:http pattern="/*.jsp" security="none" />
	<security:http pattern="/platform/failure.html*" security="none" />
	 -->
	
	<!-- add use-expressions set , so hasRole() could work -->
	<!-- 
	<http use-expressions="true" auto-config="true">
		<intercept-url pattern="/login/admin**" access="hasRole('ROLE_ADMIN')" />
		<form-login
			login-page="/login/login"
			login-processing-url="/j_spring_security_check"
			default-target-url="/login/welcome"
			authentication-failure-url="/login/login?error"
			username-parameter="username"
			password-parameter="password" />
		<logout logout-success-url="/login/login?logout"/>
	</http>
	

	<authentication-manager>
	  <authentication-provider>
	  	<jdbc-user-service data-source-ref="dataSource"
	  		users-by-username-query=
				"select username, password, enable from users where username=?"
			authorities-by-username-query=
				"select username, role from user_roles where username = ?"  />
	  </authentication-provider>
	</authentication-manager>
	 -->
</beans>